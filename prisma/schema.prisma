// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AuthUser {
    id            String    @id @unique
    username      String    @unique
    auth_session  AuthSession[]
    auth_key      AuthKey[]

    @@map("auth_user")
}

model AuthSession {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    auth_user           AuthUser   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_session")
}

model AuthKey {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    primary_key     Boolean
    expires         BigInt?
    auth_user       AuthUser    @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_key")
}

model User {
//the ID comes from the auth_user table
  id    String    @id @unique
  email String  @unique
  name  String
  phone String? @unique
  image String?

  //location

 // credentials Credential[]
  ads Ad[]

}


model Credential{
  id Int @id @default(autoincrement())
  claim String
  proof String? //url to the pdf/jpeg upload
  verified Boolean @default(false)
}

model Ad{
  id Int @id @default(autoincrement())
  userid String
  user User @relation(fields: [userid], references: [id])
  subjects AdSubject[]
  level String 
  rate Int
  description String?
  //location Location?
  //ratings Rating[]
}

model AdSubject {
  id        Int    @id @default(autoincrement())
  adId      Int
  subject   String

  ad        Ad     @relation(fields: [adId], references: [id])
}

model Rating{
  ad_id Int
  reviewer_id Int
  stars Int //0-5
  review String
  @@unique(fields:[ad_id,reviewer_id],name:"rating_id")
}

model Batch {
  id        Int     @id @default(autoincrement())
  //teacher   User    @relation(fields: [teacherId], references: [id])
  teacherId Int
  //students  User[]  //@relation(fields: []),
}

model Appointment {
  id    Int @id @default(autoincrement())
  teacherId Int
  studentId Int
  date DateTime
}

model Location{
  longitude Int
  latitude Int 
  radius Int
  @@unique(fields:[longitude,latitude],name:"location_id")
}

model Chat{
  id Int @id
  senderId Int
  recieverId Int

}