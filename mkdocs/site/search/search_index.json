{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Overview 'Paragone' is a freelance tuition site that was made with ease of use in mind. The project was written in 'SvelteKit'. Team Members: 011221427 - Taimur Rahman 011203004 - Anas Mohammad Ishfaqul Muktadir Osmani 011203011 - Al-Momen Reyad 011201129 - Asif Uddin Ahmed GitHub link: taimur-git/paragon Tech Stack We used SvelteKit for our project, which is a modern Javascript framework. It uses Svelte as the front end and NodeJS on the backend, with a powerful routing system that is similar to NextJS. For front end libraries, we used SkeletonUI, which is a TailwindCSS component library for Svelte. For the database connection, we use Prisma as an ORM and Prisma Studio as a database viewer and editor. We used SQLite as our database but if needed we could change the connector to something different. For testing, we used Vitest, as SvelteKit is a Vite project by default. We used VSCode to develop our project, using extensions of Svelte, Prisma, TailwindCSS and Copilot. Features Create course ads(advertisements) Join/Enroll in a course Launch a course Modify class schedule and other course information Chat with enrolled students Search and Filter ads Log in and Authentication","title":"Home"},{"location":"#project-overview","text":"'Paragone' is a freelance tuition site that was made with ease of use in mind. The project was written in 'SvelteKit'. Team Members: 011221427 - Taimur Rahman 011203004 - Anas Mohammad Ishfaqul Muktadir Osmani 011203011 - Al-Momen Reyad 011201129 - Asif Uddin Ahmed GitHub link: taimur-git/paragon","title":"Project Overview"},{"location":"#tech-stack","text":"We used SvelteKit for our project, which is a modern Javascript framework. It uses Svelte as the front end and NodeJS on the backend, with a powerful routing system that is similar to NextJS. For front end libraries, we used SkeletonUI, which is a TailwindCSS component library for Svelte. For the database connection, we use Prisma as an ORM and Prisma Studio as a database viewer and editor. We used SQLite as our database but if needed we could change the connector to something different. For testing, we used Vitest, as SvelteKit is a Vite project by default. We used VSCode to develop our project, using extensions of Svelte, Prisma, TailwindCSS and Copilot.","title":"Tech Stack"},{"location":"#features","text":"Create course ads(advertisements) Join/Enroll in a course Launch a course Modify class schedule and other course information Chat with enrolled students Search and Filter ads Log in and Authentication","title":"Features"},{"location":"about/","text":"Feature Description Create course ads(advertisements): Work done by: Taimur Users can post course advertisement. This ads will be visible in the home page of other users. To create an ad, go to the post ad page. Then, fill up a form that asks for three types of information; general, payment related and class schedule related. In the general information section, give a suitable title and description of the course. For the payment section, mention how much would you ask/offer from a student on a weekly or monthly basis. There is also an option to keep the tuition fee negotiable. Lastly, in the class schedule section set the week days and time that the classes will take place. Also, there might be a lifetime/timespan for the whole course. Join/Enroll in a course Work done by: Anas, Reyad In the home page, users can browse ads posted by other users. Clicking in one of this ads will open up a modal showing all the relevant ad details and a \"Join\" button. If this button is clicked a join request will be made that can be seen by the ad creator. From the ad creator side, all such requests will be listed under the \"Join Requests\" section of the ad details page. He can either accept or decline each join request. This response will be sent to the user who requested to join. Accepted users can view the class details page consisting of all features needed to participate the class. For those who are rejected to enter the course, will be notified about their join declined along with a reason why he was not accepted if the teacher (i.e. ad creator) mentions any. Launch a course Work done by: Anas Once a teacher is satisfied with the students in his batch, he can launch the course, which starts the schedule given while posting the ad. Modify class schedule and other course information Work done by: Anas After posting an ad the teacher can edit the details in post. Chat with enrolled students Work done by: Anas Each ad created has a group chat attached to it. Search and Filter Ads Work done by: Reyad Ads can be filtered by a variety of tags that have been created with a seed function (Taimur). Profile Edit Work done by: Asif A user can edit their profile to add extra information that would be useful for students to know. For example, which university Log in and Authentication Work done by: Asif, Taimur Using Lucia, we implemented Authentication and Sessions.","title":"Features"},{"location":"about/#feature-description","text":"","title":"Feature Description"},{"location":"about/#create-course-adsadvertisements","text":"Work done by: Taimur Users can post course advertisement. This ads will be visible in the home page of other users. To create an ad, go to the post ad page. Then, fill up a form that asks for three types of information; general, payment related and class schedule related. In the general information section, give a suitable title and description of the course. For the payment section, mention how much would you ask/offer from a student on a weekly or monthly basis. There is also an option to keep the tuition fee negotiable. Lastly, in the class schedule section set the week days and time that the classes will take place. Also, there might be a lifetime/timespan for the whole course.","title":"Create course ads(advertisements):"},{"location":"about/#joinenroll-in-a-course","text":"Work done by: Anas, Reyad In the home page, users can browse ads posted by other users. Clicking in one of this ads will open up a modal showing all the relevant ad details and a \"Join\" button. If this button is clicked a join request will be made that can be seen by the ad creator. From the ad creator side, all such requests will be listed under the \"Join Requests\" section of the ad details page. He can either accept or decline each join request. This response will be sent to the user who requested to join. Accepted users can view the class details page consisting of all features needed to participate the class. For those who are rejected to enter the course, will be notified about their join declined along with a reason why he was not accepted if the teacher (i.e. ad creator) mentions any.","title":"Join/Enroll in a course"},{"location":"about/#launch-a-course","text":"Work done by: Anas Once a teacher is satisfied with the students in his batch, he can launch the course, which starts the schedule given while posting the ad.","title":"Launch a course"},{"location":"about/#modify-class-schedule-and-other-course-information","text":"Work done by: Anas After posting an ad the teacher can edit the details in post.","title":"Modify class schedule and other course information"},{"location":"about/#chat-with-enrolled-students","text":"Work done by: Anas Each ad created has a group chat attached to it.","title":"Chat with enrolled students"},{"location":"about/#search-and-filter-ads","text":"Work done by: Reyad Ads can be filtered by a variety of tags that have been created with a seed function (Taimur).","title":"Search and Filter Ads"},{"location":"about/#profile-edit","text":"Work done by: Asif A user can edit their profile to add extra information that would be useful for students to know. For example, which university","title":"Profile Edit"},{"location":"about/#log-in-and-authentication","text":"Work done by: Asif, Taimur Using Lucia, we implemented Authentication and Sessions.","title":"Log in and Authentication"},{"location":"conclusion/","text":"Conclusion Working on this project was fun, since we had hands-on experience with SvelteKit. However, we did not plan things ahead of time which delayed our progress significantly. Due to this, we were not able to add every single feature we promised to add, and here are the following omitted features: Searching by location Getting user location through geolocation API and storing it securely Allowing for batch studying Allowing for validating and verifying credentials Allowing for teachers to sign up with LinkedIn to easily fetch credentials An admin view to verify credentials against their proofs While a lot of these already exist in the database, no implementations exist. We definitely have a lot of future work ahead if we want to have this deployment ready, and there's a lot more beta testing to be done to finetune our project to allow it to be user-friendly.","title":"Conclusion"},{"location":"conclusion/#conclusion","text":"Working on this project was fun, since we had hands-on experience with SvelteKit. However, we did not plan things ahead of time which delayed our progress significantly. Due to this, we were not able to add every single feature we promised to add, and here are the following omitted features: Searching by location Getting user location through geolocation API and storing it securely Allowing for batch studying Allowing for validating and verifying credentials Allowing for teachers to sign up with LinkedIn to easily fetch credentials An admin view to verify credentials against their proofs While a lot of these already exist in the database, no implementations exist. We definitely have a lot of future work ahead if we want to have this deployment ready, and there's a lot more beta testing to be done to finetune our project to allow it to be user-friendly.","title":"Conclusion"},{"location":"installation/","text":"Installation Prerequisites Feel free to skip this step if you already have git and node+npm installed on your device. Install the latest version of git Install the latest version of nodeJS Cloning a local version of Paragone First, clone the repository on your local machine. git clone https://github.com/taimur-git/paragon.git This will create a folder called paragon, cd paragon to continue. Installing dependencies Next we have to install all the node modules. This will take a while. npm install Initialise Database npm run env npm run update If at any point you decide to change the database under prisma/schema.prisma, run npm run update . Development Runs in port:5172 npm run dev Building To create a production version of your app: npm run build You can preview the production build with npm run preview . You can preview the database at port:5555 with npm run db . You can create an ERD of the database with npm run erd . To deploy your app, you may need to install an adapter for your target environment. Testing To run some test cases: npm run test or npm run test:ui , runs in port:51204","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#prerequisites","text":"Feel free to skip this step if you already have git and node+npm installed on your device. Install the latest version of git Install the latest version of nodeJS","title":"Prerequisites"},{"location":"installation/#cloning-a-local-version-of-paragone","text":"First, clone the repository on your local machine. git clone https://github.com/taimur-git/paragon.git This will create a folder called paragon, cd paragon to continue.","title":"Cloning a local version of Paragone"},{"location":"installation/#installing-dependencies","text":"Next we have to install all the node modules. This will take a while. npm install","title":"Installing dependencies"},{"location":"installation/#initialise-database","text":"npm run env npm run update If at any point you decide to change the database under prisma/schema.prisma, run npm run update .","title":"Initialise Database"},{"location":"installation/#development","text":"Runs in port:5172 npm run dev","title":"Development"},{"location":"installation/#building","text":"To create a production version of your app: npm run build You can preview the production build with npm run preview . You can preview the database at port:5555 with npm run db . You can create an ERD of the database with npm run erd . To deploy your app, you may need to install an adapter for your target environment.","title":"Building"},{"location":"installation/#testing","text":"To run some test cases: npm run test or npm run test:ui , runs in port:51204","title":"Testing"},{"location":"testing/","text":"Testing For testing, we used the Vite plug in Vitest. SvelteKit is relatively new, so testing libraries have changed from Jest to Vitest. For our unit testing, we decided to simulate if different database accesses similar to our API. We decided to test four things: Post Ad import { test, expect } from 'vitest'; import { prisma } from '$lib/server/prisma'; import { now } from 'svelte/internal'; const tags = [ { tag: { connect: { id: 9, }, }, }, { tag: { connect: { id: 22, }, }, }, ]; const ads = [ { userid: \"7c4Q1RfvQCMOmzm\", salaryType: \"negotiable\", typeOfTutor: \"offline\", description: \"lorem ipsum\", title: \"Geometry Tutor\", workDays: \"[5,6]\", startTime: now.toString(), endTime: now.toString(), tags: { create: tags } } , { userid: \"7c4Q1RfvQCMOmzm\", salaryType: \"weekly\", expectedSalary: 100, typeOfTutor: \"online\", description: \"dolor imet\", title: \"Guitar Tutor\", workDays: \"[2]\", startTime: now.toString(), endTime: now.toString(), }, { userid: \"7c4Q1RfvQCMOmzm\", salaryType: \"monthly\", expectedSalary: 1000, typeOfTutor: \"both\", description: \"sit amet\", title: \"Piano Tutor\" }, { userid: \"doesn't exist\" }, ]; ads.forEach(ad => { test(`post an Ad, ${ad.title}`, async () => { const postReq = await prisma.ad.create({ data: ad }) expect(postReq).toBeDefined(); }); }); Test result of Post Ad Delete Ad import { test, expect } from 'vitest'; import { prisma } from '$lib/server/prisma'; const adIdsToDelete = [27, 28, 29, 30]; for (const adId of adIdsToDelete) { test(`delete ad with id ${adId}`, async () => { const deleteReq = await prisma.request.deleteMany({ where: { adId: adId, }, }); const appointment = await prisma.appointment.deleteMany({ where: { adId: adId, }, }); const adTag = await prisma.adTag.deleteMany({ where: { adId: adId, }, }); const ad = await prisma.ad.delete({ where: { id: adId, }, }); expect(deleteReq).toBeDefined(); expect(appointment).toBeDefined(); expect(adTag).toBeDefined(); expect(ad).toBeDefined(); }); } Test result of Delete Ad Process Join Request import { test, expect } from 'vitest'; import { prisma } from '$lib/server/prisma'; let userId = \"7c4Q1RfvQCMOmzm\"; const test_cases = [32, 34, 37, 52]; test_cases.forEach(ad_id => { test(`process a join request for ad ${ad_id}`, async () => { const adId = ad_id; let req; const checkif_req = await prisma.request.findMany({ where: { AND: [ {adId: adId}, {userId: userId} ] }, }) const checkif_app = await prisma.appointment.findMany({ where: { AND: [ {adId: adId}, {studentId: userId} ] }, }) if(checkif_req.length===0 && checkif_app.length===0){ req = await prisma.request.create({ data: { adId: adId, userId: userId, } }) console.log(req); } expect(req).toBeDefined(); }); }); Test result of Join Request Process Edit Profile import { describe } from 'vitest'; import { test, expect } from 'vitest'; import { prisma } from '$lib/server/prisma'; test('Update users profile', async () => { const updated_user = await prisma.user.update({ data: { // username: username, name: \"Test\", // email: email, bio: \"Test bio\", phone: \"0190000000\", }, where: { id: \"vgZ2ncMmT4FvLJU\", } }) expect(updated_user).toBeDefined(); }); Test result of Edit Profile","title":"Testing"},{"location":"testing/#testing","text":"For testing, we used the Vite plug in Vitest. SvelteKit is relatively new, so testing libraries have changed from Jest to Vitest. For our unit testing, we decided to simulate if different database accesses similar to our API. We decided to test four things:","title":"Testing"},{"location":"testing/#post-ad","text":"import { test, expect } from 'vitest'; import { prisma } from '$lib/server/prisma'; import { now } from 'svelte/internal'; const tags = [ { tag: { connect: { id: 9, }, }, }, { tag: { connect: { id: 22, }, }, }, ]; const ads = [ { userid: \"7c4Q1RfvQCMOmzm\", salaryType: \"negotiable\", typeOfTutor: \"offline\", description: \"lorem ipsum\", title: \"Geometry Tutor\", workDays: \"[5,6]\", startTime: now.toString(), endTime: now.toString(), tags: { create: tags } } , { userid: \"7c4Q1RfvQCMOmzm\", salaryType: \"weekly\", expectedSalary: 100, typeOfTutor: \"online\", description: \"dolor imet\", title: \"Guitar Tutor\", workDays: \"[2]\", startTime: now.toString(), endTime: now.toString(), }, { userid: \"7c4Q1RfvQCMOmzm\", salaryType: \"monthly\", expectedSalary: 1000, typeOfTutor: \"both\", description: \"sit amet\", title: \"Piano Tutor\" }, { userid: \"doesn't exist\" }, ]; ads.forEach(ad => { test(`post an Ad, ${ad.title}`, async () => { const postReq = await prisma.ad.create({ data: ad }) expect(postReq).toBeDefined(); }); }); Test result of Post Ad","title":"Post Ad"},{"location":"testing/#delete-ad","text":"import { test, expect } from 'vitest'; import { prisma } from '$lib/server/prisma'; const adIdsToDelete = [27, 28, 29, 30]; for (const adId of adIdsToDelete) { test(`delete ad with id ${adId}`, async () => { const deleteReq = await prisma.request.deleteMany({ where: { adId: adId, }, }); const appointment = await prisma.appointment.deleteMany({ where: { adId: adId, }, }); const adTag = await prisma.adTag.deleteMany({ where: { adId: adId, }, }); const ad = await prisma.ad.delete({ where: { id: adId, }, }); expect(deleteReq).toBeDefined(); expect(appointment).toBeDefined(); expect(adTag).toBeDefined(); expect(ad).toBeDefined(); }); } Test result of Delete Ad","title":"Delete Ad"},{"location":"testing/#process-join-request","text":"import { test, expect } from 'vitest'; import { prisma } from '$lib/server/prisma'; let userId = \"7c4Q1RfvQCMOmzm\"; const test_cases = [32, 34, 37, 52]; test_cases.forEach(ad_id => { test(`process a join request for ad ${ad_id}`, async () => { const adId = ad_id; let req; const checkif_req = await prisma.request.findMany({ where: { AND: [ {adId: adId}, {userId: userId} ] }, }) const checkif_app = await prisma.appointment.findMany({ where: { AND: [ {adId: adId}, {studentId: userId} ] }, }) if(checkif_req.length===0 && checkif_app.length===0){ req = await prisma.request.create({ data: { adId: adId, userId: userId, } }) console.log(req); } expect(req).toBeDefined(); }); }); Test result of Join Request Process","title":"Process Join Request"},{"location":"testing/#edit-profile","text":"import { describe } from 'vitest'; import { test, expect } from 'vitest'; import { prisma } from '$lib/server/prisma'; test('Update users profile', async () => { const updated_user = await prisma.user.update({ data: { // username: username, name: \"Test\", // email: email, bio: \"Test bio\", phone: \"0190000000\", }, where: { id: \"vgZ2ncMmT4FvLJU\", } }) expect(updated_user).toBeDefined(); }); Test result of Edit Profile","title":"Edit Profile"},{"location":"user-guide/","text":"User Guide Getting started Entering the site for the first time you can search for ads. Also, you can view all the ads posted by signed up users. You will be limited to only viewing this ads. In order to actually join one you need to register. On the top right corner, click on the register button to view the step wise registration form. At first, we ask how you intend to use the site; maybe you want to teach others or you are looking for a tutor that fits your academic demands etc. As you proceed to the next steps, depending on your usability preference either one or two more steps are to be completed. For a quick registration, just choose the student option then provide some basic information(like your name, email address and password) to get started in your Paragone journey! Core concepts To begin with, we kept the type of user very flexible. A user is free to use the site services as per his likings. Therefore, there are three possible ways that a user might interact with the site. First of all, a user can simply join course(s) and attend classes. Secondly, a user may post advertisements that he would like to teach others. Then conduct classes as per his schedule. Finally, there can be users who wants to teach others and at the same time enroll in courses posted by other users. Joining a course As a registered user, you can send join request to the ad posts viewed in the home page. Check enrolled courses Once enrolled in a course and the teacher accepts you into the course, you can view it on the Enrolled courses tab on the left. Each course has its own course details, which will show your classmates. To access course details, click on the course. Schedule and Chat Each course has its own schedule that has been defined when posting the ad, and a chat between the teacher and their students. These are both accessible at the top bar. Post advertisements To post an ad, we have this page. After posting an ad, it should show up under My Ads. Deleting or editing the course It's possible to delete the course from My Ads by clicking the 'X' button, which will give you a prompt to confirm deletion. You can also click on the ad to change any necessary information or just launch the course. Launching course The launch button can only be pressed if there is at least one student enrolled to the course. If you want to accept a student, the requests will be on the right side. After accepting a student, you can click on 'Launch' and you will be greeted with the launched course, from which you can view the schedule and chat from the top bar.","title":"User Manual"},{"location":"user-guide/#user-guide","text":"","title":"User Guide"},{"location":"user-guide/#getting-started","text":"Entering the site for the first time you can search for ads. Also, you can view all the ads posted by signed up users. You will be limited to only viewing this ads. In order to actually join one you need to register. On the top right corner, click on the register button to view the step wise registration form. At first, we ask how you intend to use the site; maybe you want to teach others or you are looking for a tutor that fits your academic demands etc. As you proceed to the next steps, depending on your usability preference either one or two more steps are to be completed. For a quick registration, just choose the student option then provide some basic information(like your name, email address and password) to get started in your Paragone journey!","title":"Getting started"},{"location":"user-guide/#core-concepts","text":"To begin with, we kept the type of user very flexible. A user is free to use the site services as per his likings. Therefore, there are three possible ways that a user might interact with the site. First of all, a user can simply join course(s) and attend classes. Secondly, a user may post advertisements that he would like to teach others. Then conduct classes as per his schedule. Finally, there can be users who wants to teach others and at the same time enroll in courses posted by other users.","title":"Core concepts"},{"location":"user-guide/#joining-a-course","text":"As a registered user, you can send join request to the ad posts viewed in the home page.","title":"Joining a course"},{"location":"user-guide/#check-enrolled-courses","text":"Once enrolled in a course and the teacher accepts you into the course, you can view it on the Enrolled courses tab on the left. Each course has its own course details, which will show your classmates. To access course details, click on the course.","title":"Check enrolled courses"},{"location":"user-guide/#schedule-and-chat","text":"Each course has its own schedule that has been defined when posting the ad, and a chat between the teacher and their students. These are both accessible at the top bar.","title":"Schedule and Chat"},{"location":"user-guide/#post-advertisements","text":"To post an ad, we have this page. After posting an ad, it should show up under My Ads.","title":"Post advertisements"},{"location":"user-guide/#deleting-or-editing-the-course","text":"It's possible to delete the course from My Ads by clicking the 'X' button, which will give you a prompt to confirm deletion. You can also click on the ad to change any necessary information or just launch the course.","title":"Deleting or editing the course"},{"location":"user-guide/#launching-course","text":"The launch button can only be pressed if there is at least one student enrolled to the course. If you want to accept a student, the requests will be on the right side. After accepting a student, you can click on 'Launch' and you will be greeted with the launched course, from which you can view the schedule and chat from the top bar.","title":"Launching course"}]}